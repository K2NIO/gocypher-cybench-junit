/*
 * Copyright (C) 2020-2022, K2N.IO.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

plugins {
    id 'maven-publish'
    id 'java'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
}

group = 'com.gocypher'
archivesBaseName = 'cybench-t2b-annotations'
version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

// System properties to choose unit testing framework. JUnit5 is default
ext {
    // JUnit4
    isJU4 = System.properties['unitTests'] == 'junit4'
    // TestNG
    isTNG = System.properties['unitTests'] == 'testng'
}

configurations {
    t2b
}

// https://docs.gradle.org/current/userguide/tutorial_java_projects.html
// https://mvnrepository.com/

dependencies {
    implementation 'com.google.auto.service:auto-service:1.0.1'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.24.2'
    implementation 'org.openjdk.jmh:jmh-core:1.35'
    implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
    implementation 'org.testng:testng:7.5'
    implementation 'junit:junit:4.13.2'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    implementation files("${System.properties['java.home']}/../lib/tools.jar")
    // Needed to run JUnit5 tests
    testRuntimeOnly 'org.junit.platform:junit-platform-console-standalone:1.8.2'
    // T2B runtime dependency
    t2b 'com.gocypher.cybench:cybench-t2b-agent:1.0.8-SNAPSHOT'
}

task copyClientLibs(type: Copy) {
    group = 'distribution'
    description = 'Collect and copy runtime libs into dedicated dir'
    from {
        configurations.runtimeClasspath
    }
    from configurations.testRuntimeClasspath
    from configurations.t2b
    from jar
    into 'libs'
    include '*.jar'
}

test {
//@See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    // enable JUnit support
//    useJUnit()
    // enable TestNG support (default is JUnit)
//    useTestNG()
    // enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform()
}

jar {
//
// This will put all the contents from the jars into a single jar
//    from {
//        configurations.compile.collect {
//            it.isDirectory() ? it : zipTree(it)
//        }
//    }

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest {
        attributes 'Can-Retransform-Classes': true,
                'Can-Redefine-Classes': true
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "$group"
            artifactId = "$archivesBaseName"
            version = "$version"

            from components.java
        }
    }
}

// Prints out command line args list for JavaExec tasks
allprojects {
    tasks.withType(JavaExec) {
        doFirst {
            println "Task [$name] command line tokens: $commandLine"
        }
    }
}

task runBenchmarksFromUnitTests(type: JavaExec, dependsOn: testClasses) {
    group = 'cybench-t2b'
    description = 'Run unit tests as JMH benchmarks'
    classpath = files(
            project.sourceSets.main.runtimeClasspath,
            project.sourceSets.test.runtimeClasspath,
            configurations.t2b
    )
//    debugOptions {
//        enabled = true
//        port = 5005
//        server = true
//        suspend = true
//    }
    if (JavaVersion.current().isJava9Compatible()) {
        jvmArgs = [
                "-javaagent:\"${configurations.t2b.iterator().next()}\"",
                '--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED',
                '--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED'
        ]
    } else {
        jvmArgs = [
                "-javaagent:\"${configurations.t2b.iterator().next()}\""
        ]
    }
    systemProperties = [
            't2b.aop.cfg.path'     : "$project.projectDir/t2b/t2b.properties",
            't2b.metadata.cfg.path': "$project.projectDir/t2b/metadata.properties",
            // ### To use custom LOG4J configuration
            //'log4j2.configurationFile'  : "file:$project.projectDir/t2b/log4j2.xml"
    ]

    if (isJU4) {
        //    ### Config for JUnit4 runner ###
        main = 'org.junit.runner.JUnitCore'
        args = [
                'org.openjdk.jmh.generators.core.TestScopeBenchmarkGeneratorTestJU4'
        ]
    } else if (isTNG) {
        //    ### Config for TestNG runner ###
        main = 'org.testng.TestNG'
        args = [
                '-testclass', 'org.openjdk.jmh.generators.core.TestScopeBenchmarkGeneratorTestNG'
        ]
    } else {
        //    ### Config for JUnit5/JUnit4 runner ###
        main = 'org.junit.platform.console.ConsoleLauncher'
        args = [
                '--scan-class-path'
                // ### In case you dont want to run JUnit4 tests, exclude vintage engine
                //'--scan-class-path', '-E=junit-vintage'
        ]
    }
}

task buildLibsDir(type: GradleBuild) {
    tasks = ['clean', 'build', 'copyClientLibs']
    group = 'distribution'
    description = 'Build runtime libs package'
}

//build.finalizedBy(copyClientLibs)

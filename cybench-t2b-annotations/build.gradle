/*
 * Copyright (C) 2020-2021, K2N.IO.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

plugins {
    id 'maven-publish'
    id 'java'
}

repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
    mavenLocal()
}

group = 'com.gocypher'
archivesBaseName = 'cybench-t2b-annotations'
version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    t2b
    cybench
}

// https://docs.gradle.org/current/userguide/tutorial_java_projects.html
// https://mvnrepository.com/

dependencies {
    compile 'com.google.auto.service:auto-service:1.0'
    compile 'com.github.javaparser:javaparser-symbol-solver-core:3.23.1'
    compile 'org.openjdk.jmh:jmh-core:1.32'
    compile 'org.openjdk.jmh:jmh-generator-annprocess:1.32'
    compile 'org.testng:testng:7.4.0'
    compile 'junit:junit:4.13.2'
    compile 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    compile files("${System.properties['java.home']}/../lib/tools.jar")
    testCompile 'org.testng:testng:7.4.0'
    testCompile 'junit:junit:4.13.2'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    t2b 'com.gocypher.cybench:cybench-t2b-agent:1.0.6-SNAPSHOT'
    cybench 'com.gocypher.cybench.client:gocypher-cybench-runner:1.2-SNAPSHOT'
}

test {
//@See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    // enable JUnit support
//    useJUnit()
    // enable TestNG support (default is JUnit)
//    useTestNG()
    // enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform()
}

jar {
//
// This will put all the contents from the jars into a single jar
//    from {
//        configurations.compile.collect {
//            it.isDirectory() ? it : zipTree(it)
//        }
//    }

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest {
        attributes 'Can-Retransform-Classes': true,
                'Can-Redefine-Classes': true
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "$group"
            artifactId = "$archivesBaseName"
            version = "$version"

            from components.java
        }
    }
}

// Prints out command line args list for JavaExec tasks
allprojects {
    tasks.withType(JavaExec) {
        doFirst {
            println "Task [$name] command line tokens: $commandLine"
        }
    }
}

task buildBenchmarksFromUnitTests(type: JavaExec, dependsOn: testClasses) {
    group = 'CyBench-T2B'
    description = 'Run Test2Benchmark (T2B) benchmarks generator agent'
    classpath = files(
            project.sourceSets.main.runtimeClasspath,
            project.sourceSets.test.runtimeClasspath,
            configurations.t2b
    )
//    debugOptions {
//        enabled = true
//        port = 5005
//        server = true
//        suspend = true
//    }
    if (JavaVersion.current().isJava9Compatible()) {
        jvmArgs = [
                "-javaagent:\"${configurations.t2b.iterator().next()}\"",
                '--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED',
                '--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED'
        ]
    } else {
        jvmArgs = [
                "-javaagent:\"${configurations.t2b.iterator().next()}\""
        ]
    }
    systemProperties = [
            't2b.build.dir': "$buildDir"
    ]
    main = 'com.gocypher.cybench.Test2Benchmark'
}


task runBenchmarksFromUnitTestsCybench(type: JavaExec, dependsOn: buildBenchmarksFromUnitTests) {
    def benchRunProps = new Properties()
    def pFile = file(".benchRunProps")
    if (pFile.exists()) {
        pFile.withInputStream { benchRunProps.load(it) }
    }

    def t2bClassPath = benchRunProps.getProperty('T2B_CLASS_PATH')
    if (t2bClassPath != null) {
        t2bClassPath = t2bClassPath.replaceAll("\"", "")
    }

    group = 'CyBench-T2B'
    description = 'Run T2B generated JMH benchmarks over Cybench Launcher runner'
    classpath = files(
            project.sourceSets.main.runtimeClasspath,
            project.sourceSets.test.runtimeClasspath,
            [t2bClassPath],
            configurations.cybench
    )
    if (JavaVersion.current().isJava9Compatible()) {
        jvmArgs = [
                '--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED',
                '--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED'
        ]
    }

    //    ### Config for CyBench Launcher runner ###
    main = 'com.gocypher.cybench.launcher.BenchmarkRunner'
    args = [
            'cfg=t2b/cybench-launcher.properties'
    ]

//    ### Config for JMH runner ###
//    main = 'org.openjdk.jmh.Main'
//    args = [
//            '-f', '1', '-w', '5s', '-wi', '0', '-i', '1', '-r', '5s', '-t', '1', '-bm', 'Throughput'
//    ]
}
